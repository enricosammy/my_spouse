PS C:\FlutterApps\my_spouse\llama.cpp> C:\FlutterApps\my_spouse\llama.cpp\build\bin\Release\llama-run.exe "C:\FlutterApps\my_spouse\llama.cpp\build\bin\Release\llama-2-7b.Q3_K_M.gguf" -p "Hello, AI!" --chat-template-file "C:\FlutterApps\my_spouse\llama.cpp\build\bin\Release\chat_template.json" --jinja --verbose -n 100
Loading modelllama_model_loader: loaded meta data with 19 key-value pairs and 291 tensors from C:\FlutterApps\my_spouse\llama.cpp\build\bin\Release\llama-2-7b.Q3_K_M.gguf (version GGUF V2)
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = llama
llama_model_loader: - kv   1:                               general.name str              = LLaMA v2
llama_model_loader: - kv   2:                       llama.context_length u32              = 4096
llama_model_loader: - kv   3:                     llama.embedding_length u32              = 4096
llama_model_loader: - kv   4:                          llama.block_count u32              = 32
llama_model_loader: - kv   5:                  llama.feed_forward_length u32              = 11008
llama_model_loader: - kv   6:                 llama.rope.dimension_count u32              = 128
llama_model_loader: - kv   7:                 llama.attention.head_count u32              = 32
llama_model_loader: - kv   8:              llama.attention.head_count_kv u32              = 32
llama_model_loader: - kv   9:     llama.attention.layer_norm_rms_epsilon f32              = 0.000010
llama_model_loader: - kv  10:                          general.file_type u32              = 12
llama_model_loader: - kv  11:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  12:                      tokenizer.ggml.tokens arr[str,32000]   = ["<unk>", "<s>", "</s>", "<0x00>", "<...
llama_model_loader: - kv  13:                      tokenizer.ggml.scores arr[f32,32000]   = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  14:                  tokenizer.ggml.token_type arr[i32,32000]   = [2, 3, 3, 6, 6, 6, 6, 6, 6, 6, 6, 6, ...
llama_model_loader: - kv  15:                tokenizer.ggml.bos_token_id u32              = 1
llama_model_loader: - kv  16:                tokenizer.ggml.eos_token_id u32              = 2
llama_model_loader: - kv  17:            tokenizer.ggml.unknown_token_id u32              = 0
llama_model_loader: - kv  18:               general.quantization_version u32              = 2
llama_model_loader: - type  f32:   65 tensors
llama_model_loader: - type q3_K:  129 tensors
llama_model_loader: - type q4_K:   92 tensors
llama_model_loader: - type q5_K:    4 tensors
llama_model_loader: - type q6_K:    1 tensors
print_info: file format = GGUF V2
print_info: file type   = Q3_K - Medium
print_info: file size   = 3.07 GiB (3.91 BPW)
init_tokenizer: initializing tokenizer for type 1
load: control token:      2 '</s>' is not marked as EOG
load: control token:      1 '<s>' is not marked as EOG
load: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
load: special tokens cache size = 3
load: token to piece cache size = 0.1684 MB
print_info: arch             = llama
print_info: vocab_only       = 0
print_info: n_ctx_train      = 4096
print_info: n_embd           = 4096
print_info: n_layer          = 32
print_info: n_head           = 32
print_info: n_head_kv        = 32
print_info: n_rot            = 128
print_info: n_swa            = 0
print_info: is_swa_any       = 0
print_info: n_embd_head_k    = 128
print_info: n_embd_head_v    = 128
print_info: n_gqa            = 1
print_info: n_embd_k_gqa     = 4096
print_info: n_embd_v_gqa     = 4096
print_info: f_norm_eps       = 0.0e+00
print_info: f_norm_rms_eps   = 1.0e-05
print_info: f_clamp_kqv      = 0.0e+00
print_info: f_max_alibi_bias = 0.0e+00
print_info: f_logit_scale    = 0.0e+00
print_info: f_attn_scale     = 0.0e+00
print_info: n_ff             = 11008
print_info: n_expert         = 0
print_info: n_expert_used    = 0
print_info: causal attn      = 1
print_info: pooling type     = 0
print_info: rope type        = 0
print_info: rope scaling     = linear
print_info: freq_base_train  = 10000.0
print_info: freq_scale_train = 1
print_info: n_ctx_orig_yarn  = 4096
print_info: rope_finetuned   = unknown
print_info: ssm_d_conv       = 0
print_info: ssm_d_inner      = 0
print_info: ssm_d_state      = 0
print_info: ssm_dt_rank      = 0
print_info: ssm_dt_b_c_rms   = 0
print_info: model type       = 7B
print_info: model params     = 6.74 B
print_info: general.name     = LLaMA v2
print_info: vocab type       = SPM
print_info: n_vocab          = 32000
print_info: n_merges         = 0
print_info: BOS token        = 1 '<s>'
print_info: EOS token        = 2 '</s>'
print_info: UNK token        = 0 '<unk>'
print_info: LF token         = 13 '<0x0A>'
print_info: EOG token        = 2 '</s>'
print_info: max token length = 48
load_tensors: loading model tensors, this can take a while... (mmap = true)
load_tensors: layer   0 assigned to device CPU, is_swa = 0
load_tensors: layer   1 assigned to device CPU, is_swa = 0
load_tensors: layer   2 assigned to device CPU, is_swa = 0
load_tensors: layer   3 assigned to device CPU, is_swa = 0
load_tensors: layer   4 assigned to device CPU, is_swa = 0
load_tensors: layer   5 assigned to device CPU, is_swa = 0
load_tensors: layer   6 assigned to device CPU, is_swa = 0
load_tensors: layer   7 assigned to device CPU, is_swa = 0
load_tensors: layer   8 assigned to device CPU, is_swa = 0
load_tensors: layer   9 assigned to device CPU, is_swa = 0
load_tensors: layer  10 assigned to device CPU, is_swa = 0
load_tensors: layer  11 assigned to device CPU, is_swa = 0
load_tensors: layer  12 assigned to device CPU, is_swa = 0
load_tensors: layer  13 assigned to device CPU, is_swa = 0
load_tensors: layer  14 assigned to device CPU, is_swa = 0
load_tensors: layer  15 assigned to device CPU, is_swa = 0
load_tensors: layer  16 assigned to device CPU, is_swa = 0
load_tensors: layer  17 assigned to device CPU, is_swa = 0
load_tensors: layer  18 assigned to device CPU, is_swa = 0
load_tensors: layer  19 assigned to device CPU, is_swa = 0
load_tensors: layer  20 assigned to device CPU, is_swa = 0
load_tensors: layer  21 assigned to device CPU, is_swa = 0
load_tensors: layer  22 assigned to device CPU, is_swa = 0
load_tensors: layer  23 assigned to device CPU, is_swa = 0
load_tensors: layer  24 assigned to device CPU, is_swa = 0
load_tensors: layer  25 assigned to device CPU, is_swa = 0
load_tensors: layer  26 assigned to device CPU, is_swa = 0
load_tensors: layer  27 assigned to device CPU, is_swa = 0
load_tensors: layer  28 assigned to device CPU, is_swa = 0
load_tensors: layer  29 assigned to device CPU, is_swa = 0
load_tensors: layer  30 assigned to device CPU, is_swa = 0
load_tensors: layer  31 assigned to device CPU, is_swa = 0
load_tensors: layer  32 assigned to device CPU, is_swa = 0
load_tensors: tensor 'token_embd.weight' (q3_K) (and 198 others) cannot be used with preferred buffer type CPU_AARCH64, using CPU instead
load_tensors:  CPU_AARCH64 model buffer size =  1283.62 MiB
load_tensors:   CPU_Mapped model buffer size =  3144.52 MiB
repack: repack tensor blk.0.attn_output.weight with q4_K_8x8
repack: repack tensor blk.1.attn_output.weight with q4_K_8x8
repack: repack tensor blk.2.attn_v.weight with q4_K_8x8
repack: repack tensor blk.2.attn_output.weight with q4_K_8x8
.repack: repack tensor blk.2.ffn_down.weight with q4_K_8x8
repack: repack tensor blk.3.attn_v.weight with q4_K_8x8
.repack: repack tensor blk.3.attn_output.weight with q4_K_8x8
repack: repack tensor blk.3.ffn_down.weight with q4_K_8x8
.repack: repack tensor blk.4.attn_v.weight with q4_K_8x8
repack: repack tensor blk.4.attn_output.weight with q4_K_8x8
repack: repack tensor blk.4.ffn_down.weight with q4_K_8x8
.repack: repack tensor blk.5.attn_v.weight with q4_K_8x8
repack: repack tensor blk.5.attn_output.weight with q4_K_8x8
.repack: repack tensor blk.5.ffn_down.weight with q4_K_8x8
repack: repack tensor blk.6.attn_v.weight with q4_K_8x8
.repack: repack tensor blk.6.attn_output.weight with q4_K_8x8
repack: repack tensor blk.6.ffn_down.weight with q4_K_8x8
.repack: repack tensor blk.7.attn_v.weight with q4_K_8x8
repack: repack tensor blk.7.attn_output.weight with q4_K_8x8
repack: repack tensor blk.7.ffn_down.weight with q4_K_8x8
.repack: repack tensor blk.8.attn_v.weight with q4_K_8x8
repack: repack tensor blk.8.attn_output.weight with q4_K_8x8
.repack: repack tensor blk.8.ffn_down.weight with q4_K_8x8
repack: repack tensor blk.9.attn_v.weight with q4_K_8x8
.repack: repack tensor blk.9.attn_output.weight with q4_K_8x8
repack: repack tensor blk.9.ffn_down.weight with q4_K_8x8
.repack: repack tensor blk.10.attn_v.weight with q4_K_8x8
repack: repack tensor blk.10.attn_output.weight with q4_K_8x8
repack: repack tensor blk.10.ffn_down.weight with q4_K_8x8
.repack: repack tensor blk.11.attn_v.weight with q4_K_8x8
repack: repack tensor blk.11.attn_output.weight with q4_K_8x8
.repack: repack tensor blk.11.ffn_down.weight with q4_K_8x8
repack: repack tensor blk.12.attn_v.weight with q4_K_8x8
.repack: repack tensor blk.12.attn_output.weight with q4_K_8x8
repack: repack tensor blk.12.ffn_down.weight with q4_K_8x8
.repack: repack tensor blk.13.attn_v.weight with q4_K_8x8
repack: repack tensor blk.13.attn_output.weight with q4_K_8x8
repack: repack tensor blk.13.ffn_down.weight with q4_K_8x8
.repack: repack tensor blk.14.attn_v.weight with q4_K_8x8
repack: repack tensor blk.14.attn_output.weight with q4_K_8x8
.repack: repack tensor blk.14.ffn_down.weight with q4_K_8x8
.repack: repack tensor blk.15.attn_v.weight with q4_K_8x8
repack: repack tensor blk.15.attn_output.weight with q4_K_8x8
repack: repack tensor blk.15.ffn_down.weight with q4_K_8x8
.repack: repack tensor blk.16.attn_v.weight with q4_K_8x8
repack: repack tensor blk.16.attn_output.weight with q4_K_8x8
repack: repack tensor blk.16.ffn_down.weight with q4_K_8x8
.repack: repack tensor blk.17.attn_v.weight with q4_K_8x8
repack: repack tensor blk.17.attn_output.weight with q4_K_8x8
.repack: repack tensor blk.17.ffn_down.weight with q4_K_8x8
.repack: repack tensor blk.18.attn_v.weight with q4_K_8x8
repack: repack tensor blk.18.attn_output.weight with q4_K_8x8
repack: repack tensor blk.18.ffn_down.weight with q4_K_8x8
.repack: repack tensor blk.19.attn_v.weight with q4_K_8x8
repack: repack tensor blk.19.attn_output.weight with q4_K_8x8
repack: repack tensor blk.19.ffn_down.weight with q4_K_8x8
.repack: repack tensor blk.20.attn_v.weight with q4_K_8x8
.repack: repack tensor blk.20.attn_output.weight with q4_K_8x8
repack: repack tensor blk.20.ffn_down.weight with q4_K_8x8
.repack: repack tensor blk.21.attn_v.weight with q4_K_8x8
repack: repack tensor blk.21.attn_output.weight with q4_K_8x8
repack: repack tensor blk.21.ffn_down.weight with q4_K_8x8
.repack: repack tensor blk.22.attn_v.weight with q4_K_8x8
repack: repack tensor blk.22.attn_output.weight with q4_K_8x8
repack: repack tensor blk.22.ffn_down.weight with q4_K_8x8
.repack: repack tensor blk.23.attn_v.weight with q4_K_8x8
.repack: repack tensor blk.23.attn_output.weight with q4_K_8x8
repack: repack tensor blk.23.ffn_down.weight with q4_K_8x8
.repack: repack tensor blk.24.attn_v.weight with q4_K_8x8
repack: repack tensor blk.24.attn_output.weight with q4_K_8x8
repack: repack tensor blk.24.ffn_down.weight with q4_K_8x8
.repack: repack tensor blk.25.attn_v.weight with q4_K_8x8
repack: repack tensor blk.25.attn_output.weight with q4_K_8x8
.repack: repack tensor blk.25.ffn_down.weight with q4_K_8x8
repack: repack tensor blk.26.attn_v.weight with q4_K_8x8
.repack: repack tensor blk.26.attn_output.weight with q4_K_8x8
repack: repack tensor blk.26.ffn_down.weight with q4_K_8x8
.repack: repack tensor blk.27.attn_v.weight with q4_K_8x8
repack: repack tensor blk.27.attn_output.weight with q4_K_8x8
repack: repack tensor blk.27.ffn_down.weight with q4_K_8x8
.repack: repack tensor blk.28.attn_v.weight with q4_K_8x8
repack: repack tensor blk.28.attn_output.weight with q4_K_8x8
.repack: repack tensor blk.28.ffn_down.weight with q4_K_8x8
repack: repack tensor blk.29.attn_v.weight with q4_K_8x8
.repack: repack tensor blk.29.attn_output.weight with q4_K_8x8
repack: repack tensor blk.29.ffn_down.weight with q4_K_8x8
.repack: repack tensor blk.30.attn_v.weight with q4_K_8x8
repack: repack tensor blk.30.attn_output.weight with q4_K_8x8
repack: repack tensor blk.30.ffn_down.weight with q4_K_8x8
.repack: repack tensor blk.31.attn_v.weight with q4_K_8x8
repack: repack tensor blk.31.attn_output.weight with q4_K_8x8
.repack: repack tensor blk.31.ffn_down.weight with q4_K_8x8
.........................................................
llama_context: constructing llama_context
llama_context: n_seq_max     = 1
llama_context: n_ctx         = 2048
llama_context: n_ctx_per_seq = 2048
llama_context: n_batch       = 2048
llama_context: n_ubatch      = 512
llama_context: causal_attn   = 1
llama_context: flash_attn    = 0
llama_context: freq_base     = 10000.0
llama_context: freq_scale    = 1
llama_context: n_ctx_per_seq (2048) < n_ctx_train (4096) -- the full capacity of the model will not be utilized
set_abort_callback: call
llama_context:        CPU  output buffer size =     0.12 MiB
create_memory: n_ctx = 2048 (padded)
llama_kv_cache_unified: layer   0: dev = CPU
llama_kv_cache_unified: layer   1: dev = CPU
llama_kv_cache_unified: layer   2: dev = CPU
llama_kv_cache_unified: layer   3: dev = CPU
llama_kv_cache_unified: layer   4: dev = CPU
llama_kv_cache_unified: layer   5: dev = CPU
llama_kv_cache_unified: layer   6: dev = CPU
llama_kv_cache_unified: layer   7: dev = CPU
llama_kv_cache_unified: layer   8: dev = CPU
llama_kv_cache_unified: layer   9: dev = CPU
llama_kv_cache_unified: layer  10: dev = CPU
llama_kv_cache_unified: layer  11: dev = CPU
llama_kv_cache_unified: layer  12: dev = CPU
llama_kv_cache_unified: layer  13: dev = CPU
llama_kv_cache_unified: layer  14: dev = CPU
llama_kv_cache_unified: layer  15: dev = CPU
llama_kv_cache_unified: layer  16: dev = CPU
llama_kv_cache_unified: layer  17: dev = CPU
llama_kv_cache_unified: layer  18: dev = CPU
llama_kv_cache_unified: layer  19: dev = CPU
llama_kv_cache_unified: layer  20: dev = CPU
llama_kv_cache_unified: layer  21: dev = CPU
llama_kv_cache_unified: layer  22: dev = CPU
llama_kv_cache_unified: layer  23: dev = CPU
llama_kv_cache_unified: layer  24: dev = CPU
llama_kv_cache_unified: layer  25: dev = CPU
llama_kv_cache_unified: layer  26: dev = CPU
llama_kv_cache_unified: layer  27: dev = CPU
llama_kv_cache_unified: layer  28: dev = CPU
llama_kv_cache_unified: layer  29: dev = CPU
llama_kv_cache_unified: layer  30: dev = CPU
llama_kv_cache_unified: layer  31: dev = CPU
llama_kv_cache_unified:        CPU KV buffer size =  1024.00 MiB
llama_kv_cache_unified: size = 1024.00 MiB (  2048 cells,  32 layers,  1 seqs), K (f16):  512.00 MiB, V (f16):  512.00 MiB
llama_context: enumerating backends
llama_context: backend_ptrs.size() = 1
llama_context: max_nodes = 65536
llama_context: worst-case: n_tokens = 512, n_seqs = 1, n_outputs = 0
llama_context: reserving graph for n_tokens = 512, n_seqs = 1
llama_context: reserving graph for n_tokens = 1, n_seqs = 1
llama_context: reserving graph for n_tokens = 512, n_seqs = 1
llama_context:        CPU compute buffer size =   164.01 MiB
llama_context: graph nodes  = 1158
llama_context: graph splits = 1
Error reading file: Result too largeFailed to infer a tool call example (possible template bug)
